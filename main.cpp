#include <iostream>
#include <termios.h>
#include <unistd.h>
#include <fcntl.h>
#include <iomanip>
#include <random>

// export LANG=C.utf8 RUN THIS BEFORE 
using namespace std;


string Dungeon[5][5][9][9] = {
{
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "{W}", "[_]", "[_]", "[_]", "[_]"},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "{X}", "[_]", "[_]", "[_]", "|+|"},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "|+|", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "{@}", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "{#}", "[_]", "[_]", "[_]", "[_]"},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
 },
 },
{
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "{#}", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]"},
    {"  | ", "[_]", "[|]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[|]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]"},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[_]", "[|]", "[_]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[_]", "[|]", "[_]", "[|]", "[_]", " | "},
    {" [_]", "[_]", "[|]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]"},
    {"  | ", "[_]", "[|]", "[_]", "[|]", "[_]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[_]", "[|]", "[_]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "{#}", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}

},
},
{
 {
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "{%}", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]"},
    {"  | ", "{#}", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[|]", "[|]", "[|]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[_]", "[_]", "[_]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]"},
    {"  | ", "[_]", "[|]", "[_]", "[_]", "[_]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[_]", "[_]", "[_]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]"},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
}, 
 {
    {"  |-", "---", "---", "---", "|+|", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[|]", "{X}", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
},
{
 {
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "{X}", "[|]", "[_]", "[|]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "{#}", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "{%}", "[_]", "{W}", "[_]", "{#}", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "|+|", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "{X}", "[_]", "[_]", "[_]", "|+|"},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[|]", "[|]", "[|]", "[|]", "[|]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[|]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]"},
    {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[|]", "[|]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[|]", "[|]", "[|]", "[|]", "[|]", "[_]", " | "},
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
},
 {
    {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
    {" [_]", "[_]", "[_]", "[_]", "{X}", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", " | "},
    {"  | ", "[_]", "[_]", "[_]", "[_]", "[|]", "{#}", "[_]", " | "},
    {"  |-", "---", "---", "---", "|+|", "---", "---", "---", "-| "}

},
},
{
  {
      {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[|]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[|]", "[|]", "[_]", "[_]", "[_]", "[_]", "[_]"},
      {"  | ", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[|]", "[_]", "[|]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "{#}", "[_]", "[|]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
  },
  {
      {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {" |+|", "[_]", "[_]", "[_]", "{X}", "[_]", "[_]", "[_]", "[_]"},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "{#}", " | "},
      {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
  },
  {
      {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {" [_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]"},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
  },
  {
      {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "},
      {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
      {" [_]", "[_]", "[_]", "[_]", "[_]", "[_]", "{W}", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[|]", "[_]", "[_]", "[_]", " | "},
      {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
  },
  {
      {"  |-", "---", "---", "---", "[_]", "---", "---", "---", "-| "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "{W}", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  | ", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", "[_]", " | "},
      {"  |-", "---", "---", "---", "---", "---", "---", "---", "-| "}
  }
}
};

struct Position {
  int x;
  int y;
  int X;
  int Y;
};

class Player {
  public:
    Position pos;
    int health = 10;
    int potions = 10;
    const int MAXHEALTH = 10;
    int weapon = 0;
};

class Game {
  public: 
    
    string cursors[4] = {"^", "v", ">", "<"};
    string cursor = cursors[0];

    static void printLogoAndControls() {
  cout << R"(
                                    /@
                    __        __   /\/
                   /==\      /  \_/\/   
                 /======\    \/\__ \__
               /==/\  /\==\    /\_|__ \
            /==/    ||    \=\ / / /_/
          /=/    /\ || /\   \=\/ /     
        /===/   /   \||/   \   \===\
       /===/   /_________________ \===\
     /====/   / |                /  \====\
   /====/   /   |  _________    /  \   \===\    THE LEGEND OF 
 /==/   /     | /   /  \ / / /  __________\_____      ______       ___
|===| /       |/   /____/ / /   \   _____ |\   /      \   _ \      \  \
 \==\             /\   / / /     | |  /= \| | |        | | \ \     / _ \
 \===\__    \    /  \ / / /   /  | | /===/  | |        | |  \ \   / / \ \
   \==\ \    \\ /____/   /_\ //  | |_____/| | |        | |   | | / /___\ \
   \===\ \   \\\\\\\/   /////// /|  _____ | | |        | |   | | |  ___  |
     \==\/     \\\\/ / //////   \| |/==/ \| | |        | |   | | | /   \ |
     \==\     _ \\/ / /////    _ | |==/     | |        | |   | | | |   | |
       \==\  / \ / / ///      /|\| |_____/| | |_____/| | |_/ /   | |   | |
       \==\ /   / / /________/ |/_________|/_________|/_____/   /___\ /___\
         \==\  /               | /==/
          \=\  /________________|/=/    BREADTH OF THE C++
            \==\     _____     /==/ 
           / \===\   \   /   /===/
         / / /\===\  \_/  /===/
        / / /   \====\ /====/
       / / /      \===|===/
       |/_/         \===/
                      =      

=============================================================================

                CONTROLS                           LEGEND
           WASD -> Normal Movement              {#} -> Potion Chest
           I -> Access Inventory                {W} -> Weapon Chest
           Q -> Quit                            {%} -> Mystery Box
           J -> Interact                        {X} -> Monster
           K -> Attack                          {@} -> Ganon

=============================================================================

  )";
}

    char getKeyPress() {                    // GPT funcs
      if (kbhit()) {
        return getchar();
      }
      return '\0'; 
    }
    int kbhit() {                           // to allow
      struct termios oldt, newt;
      int ch;
      int oldf;

      tcgetattr(STDIN_FILENO, &oldt);
      newt = oldt;
      newt.c_lflag &= ~(ICANON | ECHO);
      tcsetattr(STDIN_FILENO, TCSANOW, &newt);
      oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
      fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

      ch = getchar();

      tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
      fcntl(STDIN_FILENO, F_SETFL, oldf);

      if (ch != EOF) {
        ungetc(ch, stdin);
        return 1; // Key was pressed
      }

      return 0; // No key was pressed
    }
    void setNonBlocking(bool enable) {      // instant input
      struct termios tty;
      tcgetattr(STDIN_FILENO, &tty);

      if (enable) {
        tty.c_lflag &= ~ICANON; // Disable canonical mode
        tty.c_lflag &= ~ECHO;   // Disable echo
        tcsetattr(STDIN_FILENO, TCSANOW, &tty);
      } else {
        tty.c_lflag |= ICANON; // Enable canonical mode
        tty.c_lflag |= ECHO;   // Enable echo
        tcsetattr(STDIN_FILENO, TCSANOW, &tty);
      }
    }

    void printRoom(string room[9][9], int x, int y, int X, int Y) {
      int dungeonPos[2] = {X, Y};
      for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
          if (j == x && i == y) {
            if (x == 0 && y == 4)
              cout << " [" << cursor << "]";
            else
              cout << "[" << cursor << "]";
          } else {
            cout << room[i][j];
          }
        }

        // Display the 5x5 grid with player's position
        if (i == 1) {
          cout << "       Position in Dungeon:" << endl;
        } else if (i >= 2 && i < 7) {
          cout << "          ";
          for (int l = 0; l < 5; l++) {
            if (l == dungeonPos[1] && (i - 2) == dungeonPos[0]) {
              cout << "⬛"; 
            } else {
              cout << "⬜"; 
            }
          }
          cout << endl; // Move to the next line after the grid row
        } else {
          cout << endl; // For any other line, just print a newline
        }
      }
    }

    void setRoom(int X, int Y, string room[9][9]) {
      for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            room[i][j] = Dungeon[X][Y][i][j]; // Accessing the specific room
        }
      }
    }

  bool interactWithChest(int X, int Y, string room[9][9], string cursor, string cursors[4], string chest) {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
          if (room[i][j] == chest) {
            Dungeon[X][Y][i][j] = "[_]";
            return true;
          }
        }
      }
      return false;
    }


    void removeChest(string room[9][9], int X, int Y, string chest) {
      for (int i = 0; i < 9; i++) {
          for (int j = 0; j < 9; j++) {
            if (room[i][j] == chest)
              Dungeon[X][Y][i][j] = "[_]";
          }
        }
      }
};

string weapons[5][3] = {
  {"Fist", "👊", "1"},
  {"Simple Whip", "🐍", "2"},
  {"Short Sword", "🗡️", "3"}, 
  {"Bloody Axe", "🪓", "5"}, 
  {"Master Sword", "⚔️", "10"}
};

class Monster {
  public:
    string checkForMonster(int x, int y, string room[9][9], string cursor, string cursors[4]) {
      if (cursor == cursors[0]) {
        if (room[x][y-1] == "{X}")
          return "{X}";
      } else if (cursor == cursors[1]) {
        if (room[x][y+1] == "{X}")
          return "{X}";
      } else if (cursor == cursors[2]) {
        if (room[x+1][y] == "{X}")
          return "{X}";
      } else if (cursor == cursors[3]) {
        if (room[x-1][y] == "{X}")
          return "{X}";
      }  
      return "NA";
    } 

    string checkForBoss(int x, int y, string room[9][9], string cursor, string cursors[4]) {
      if (cursor == cursors[0]) {
        if (room[x][y-1] == "{@}")
          return "{@}";
      } else if (cursor == cursors[1]) {
        if (room[x][y+1] == "{@}")
          return "{@}";
      } else if (cursor == cursors[2]) {
        if (room[x+1][y] == "{@}")
          return "{@}";
      } else if (cursor == cursors[3]) {
        if (room[x-1][y] == "{@}")
          return "{@}";
      }  
      return "NA";
    } 

    int health = 10;
    string attacks[5] = {"slapped", "kicked", "sliced", "slammed", "spat at"};
    string limbs[5] = {"face", "butt", "stomach", "nose", "shoulder"};
    int X;
    int Y;
    
    std::uniform_int_distribution<> dmg{1, 5};
    int generateDamage() {
        std::random_device rd;
        std::mt19937 gen(rd());
        return dmg(gen);
    }
    std::uniform_int_distribution<> atkLimb{0, 4};
    string generateAttack() {
        std::random_device rd;
        std::mt19937 gen(rd());
        return attacks[atkLimb(gen)];
    }
    string generateLimb() {
        std::random_device rd;
        std::mt19937 gen(rd());
        return limbs[atkLimb(gen)];
    }
    Monster(int x, int y) {
      X = x;
      Y = y;
    }

    void openDoorAndRemove(string room[9][9]) {
      for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
          if (room[i][j] == "|+|")
            Dungeon[X][Y][i][j] = "[_]";
          if (room[i][j] == " |+|")
            Dungeon[X][Y][i][j] = " [_]";
          if (room[i][j] == "{X}" || room[i][j] == "{@}" )
            Dungeon[X][Y][i][j] = "[_]";
        }
      }
    }
};

int main() {

  Monster monster(0, 0);
  bool won = false;
  bool almostThere = false;
  Player player;
  Game game;
  game.setNonBlocking(true);
  Game::printLogoAndControls();
  player.pos = {4, 7, 4, 2};
  string currentRoom[9][9] = {
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
    { "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  " },
  };
  game.setRoom(player.pos.X, player.pos.Y, currentRoom);
  
  cout << endl;
  game.printRoom(currentRoom, player.pos.x, player.pos.y, player.pos.X, player.pos.Y);
  cout << "=====================================" << endl;
  while (true) {
    char ch = game.getKeyPress();
    if (ch != '\0') {
      switch (ch) {
        case 'k':
          monster = Monster(player.pos.X, player.pos.Y);
          if (monster.checkForMonster(player.pos.x, player.pos.y, currentRoom, game.cursor, game.cursors) == "{X}" || monster.checkForBoss(player.pos.x, player.pos.y, currentRoom, game.cursor, game.cursors) == "{@}" ) {
            if (monster.checkForBoss(player.pos.x, player.pos.y, currentRoom, game.cursor, game.cursors) == "{@}") {
              monster.health = 150;
              cout << "Get ready to fight... GANON!!!" << endl;
              cout << "=====================================" << endl;
            } else {
              monster.health = 10; // reset for next fight
            }
            bool inFight = true;
            while (inFight) { //Fight Loop
              cout << "You initiated a fight with the monster!\n"; 
              cout << "Your health : " << player.health << "\n";
              cout << "Monster's health : " << monster.health << "\n";
              cout << R"(Will you attack. (a)
Will you heal. (h)
Will you run away. (r))" << endl;
                while (inFight) {
                int monsterDmg = monster.generateDamage();
                monsterDmg > 4 ? monsterDmg = 2 : monsterDmg = 1;
                string monsterAtk = monster.generateAttack();
                string monsterLimb = monster.generateLimb();
                char key = game.getKeyPress();
                if (key != '\0') {
                  switch (key) {
                    case 'a':
                      cout << "=====================================" << endl;
                      cout << "You attacked the monster with your " << weapons[player.weapon][0] << " " << weapons[player.weapon][1] << "! It dealt " << weapons[player.weapon][2] << " damage!" <<  endl;
                      monster.health -= stoi(weapons[player.weapon][2]);
                      if (monster.health <= 0) {
                        cout << "You defeated the monster!\n";
                        monster.openDoorAndRemove(currentRoom);
                        inFight = false; // Exit fight loop
                        break;
                      }
                      cout << "The monster "<< monsterAtk <<" you in the "<< monsterLimb << "! It dealt " << monsterDmg << " damage!" << endl;
                      player.health -= monsterDmg;
                      if (player.health <= 0) {
                        cout << "The monster got the best of you..." << endl;
                        game.setNonBlocking(false);
                        return 0;
                      }
                      cout << "Your health : " << player.health << "\n";
                      cout << "Monster's health : " << monster.health << "\n";
                      break;
                    case 'h':
                      cout << "=====================================" << endl;
                      if (player.potions > 1) {
                        if (player.health == player.MAXHEALTH - 1) {
                          cout << "You healed 1hp!" <<  endl;
                          player.health++;
                        } else if (player.health == player.MAXHEALTH) {
                          cout << "You already have max health!" << endl;
                          player.potions++;
                        } else {
                          cout << "You healed 2hp!" <<  endl;
                          player.health += 2;
                        }
                        player.potions--;
                        cout << "You have " << player.potions << " potions left!" << endl;
                        cout << "The monster "<< monsterAtk <<" you in the "<< monsterLimb << "! It dealt " << monsterDmg << " damage!" << endl;
                        player.health -= monsterDmg;
                        if (player.health == 0) {
                          cout << "The monster got the best of you..." << endl;
                          game.setNonBlocking(false);
                          return 0;
                        }
                        cout << "Your health : " << player.health << "\n";
                        cout << "Monster's health : " << monster.health << "\n";
                        break;
                      } else {
                        cout << "You've ran out of potions! Go find some more!" << endl;
                        break;
                      }
                      
                    case 'r':
                      cout << "=====================================" << endl;
                      cout << "You ran away!" <<  endl;
                      if (game.cursor == game.cursors[0]) {
                        game.cursor = game.cursors[1];
                      } else if (game.cursor == game.cursors[1]) {
                        game.cursor = game.cursors[0];
                      } else if (game.cursor == game.cursors[2]) {
                        game.cursor = game.cursors[3];
                      } else {
                        game.cursor = game.cursors[2];
                      }
                      inFight = false;
                      break;
                    
                    default:
                      break;
                  }   
                }        
              } 
            }
          }
          break;

        case 'w':
          game.cursor = game.cursors[0];
          if (player.pos.y == 0 && player.pos.X > 0) {
            player.pos.X--;
            player.pos.y = 8;
          }
          else if (player.pos.y > 0 && currentRoom[player.pos.y-1][player.pos.x] == "[_]") {
            player.pos.y--;
          } else if (player.pos.X == 0 && player.pos.Y == 2 && player.pos.x == 4 && player.pos.y == 0) {
            game.setRoom(player.pos.X, player.pos.Y, currentRoom);
            game.printRoom(currentRoom, player.pos.x, player.pos.y, player.pos.X, player.pos.Y);
            won = true;
          }
          break;

        case 'a':
          game.cursor = game.cursors[3];
          if (player.pos.x == 0 && player.pos.Y > 0) {
            player.pos.Y--;
            player.pos.x = 8;
          }
          else if (player.pos.x > 0 && (currentRoom[player.pos.y][player.pos.x-1] == " [_]" || currentRoom[player.pos.y][player.pos.x-1] == "[_]")) {
            player.pos.x--;
          }
          break;

        case 's':
          game.cursor = game.cursors[1];
          if (player.pos.y == 8 && player.pos.X < 4) {
            player.pos.X++;
            player.pos.y = 0;
          }
          else if (player.pos.y < 8 && currentRoom[player.pos.y+1][player.pos.x] == "[_]") {
            player.pos.y++;
          }
          break;

        case 'd':
          game.cursor = game.cursors[2];
          if (player.pos.x == 8 && player.pos.Y < 4) {
            player.pos.Y++;
            player.pos.x = 0;
          }
          else if (player.pos.x < 8 && currentRoom[player.pos.y][player.pos.x+1] == "[_]") {
            player.pos.x++;
          }
          break;

        case 'j':
          if (game.interactWithChest(player.pos.X, player.pos.Y, currentRoom, game.cursor, game.cursors, "{#}")) {
            player.potions += 3;
            cout << "You found 3 potions! You now have " << player.potions << " potions!" << endl;
            game.removeChest(currentRoom, player.pos.X, player.pos.Y, "{#}");
          } else if (game.interactWithChest(player.pos.X, player.pos.Y, currentRoom, game.cursor, game.cursors, "{%}")) {
            std::uniform_int_distribution<> luck{0, 1};
            std::random_device rd;
            std::mt19937 gen(rd());
            bool luckLevel = luck(gen);
            if (luckLevel) {
              cout << "You got lucky! The box contained 2 potions!" << endl;
              player.potions += 2;
              cout << "You now have " << player.potions << " potions!" << endl;
            } else {
              cout << "You got unlucky! A goblin jumped out of the box and stole 2 of your potions!" << endl;
              player.potions -= 2;
              cout << "You now have " << player.potions << " potions!" << endl;
            }
            game.removeChest(currentRoom, player.pos.X, player.pos.Y, "{%}");
          } else if (game.interactWithChest(player.pos.X, player.pos.Y, currentRoom, game.cursor, game.cursors, "{W}")) {
            player.weapon++;
            cout << "You found a new weapon, The " << weapons[player.weapon][0] << weapons[player.weapon][1] << "!" << endl;
            game.removeChest(currentRoom, player.pos.X, player.pos.Y, "{W}");
          }
          cout << "=====================================" << endl;
          break;

        case 'i':
          cout << "\n\n";
          cout << "     Current Weapon: " << weapons[player.weapon][0] << weapons[player.weapon][1] << " It deals " << weapons[player.weapon][2] << " damage!" << endl;
          cout << "     Potion amount: " << player.potions << endl;
          cout << "\n\n";
          cout << "=====================================" << endl;
          break;

        case 'q':
          cout << "Quitting...\n";
          game.setNonBlocking(false);
          return 0;
        default:
          break;
      }
      if (won) {
        cout << R"(
=====================================
              ^
  |----------[_]----------|
  | [_][_][_][_][_][_][_] |        
  | [_][_][_][_][_][_][_] |       FREEDOM AT LAST  
  | [_][_][_][_][_][_][_] |          
 [_][_][_][_][_][_][_][_] |           THANKS FOR PLAYING
  | [_][_][_][_][_][_][_] |           
  | [_][_][_][_][_][_][_] |               YOU ESCAPED THE DUNGEON  
  | [_][_][_][_][_][_][_] | 
  |-----------------------|
  )" << endl;
       game.setNonBlocking(false);
       return 0;
      }
      game.setRoom(player.pos.X, player.pos.Y, currentRoom);
      game.printRoom(currentRoom, player.pos.x, player.pos.y, player.pos.X, player.pos.Y);
      cout << "=====================================" << endl;
    }
    
  }

  game.setNonBlocking(false);
  return 0;
}